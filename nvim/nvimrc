" Plugins

call plug#begin()

" Misc
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'xolox/vim-misc'

" File navigation and search
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'rking/ag.vim'
Plug 'kien/ctrlp.vim'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'reedes/vim-wheel'
Plug 'reedes/vim-thematic'

" Look and feel
Plug 'flazz/vim-colorschemes'
Plug 'bling/vim-airline'
Plug 'ryanoasis/vim-webdevicons'
"Plug 'vim-scripts/ScrollColors'

" Tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'epeli/slimux'

" Text management
Plug 'junegunn/vim-easy-align'
Plug 'godlygeek/tabular'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-surround'

" Notes and markdown
Plug 'plasticboy/vim-markdown'
Plug 'xolox/vim-notes'

" Language agnostic
"Plug 'scrooloose/syntastic'             " syntax checker

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Clojure plugins
Plug 'vim-scripts/paredit.vim', { 'for': 'clojure' }
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'guns/vim-clojure-highlight', { 'for': 'clojure' }
Plug 'guns/vim-sexp', { 'for': 'clojure' }
Plug 'tpope/vim-repeat', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Scala
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }

" Haskell
Plug 'raichoo/haskell-vim', { 'for': 'haskell' }
Plug 'dag/vim2hs', { 'for': 'haskell' }
"Plug 'eagletmt/ghcmod-vim'
"Plug 'eagletmt/neco-ghc'
"Plug 'Twinside/vim-hoogle'

" Could be tried
" 'tacahiroy/ctrlp-funky'
" 'guns/vim-sexp' for s-expressions, might be useful for clojure.
" 'tpope/vim-sexp-mappings-for-regular-people'
" 'kshenoy/vim-signature' another approach for handling bookmarks.
" 'vim-scripts/utl.vim' URL-based hyperlinking to plain text ...

call plug#end()



" Colors
if has("gui_running")
    colorscheme gruvbox
    set background=dark
else
    colorscheme gruvbox
    set background=dark
endif
syntax on
syntax enable



" UI Config

filetype on
filetype plugin indent on

highlight Comment gui=bold,italic
highlight cursorline gui=bold cterm=bold

set anti enc=utf-8						" Antialias font
set guifont=Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types:h14
set guioptions-=r                                       " Remove the right scrollbar
set title						" show title in console title bar.
set cursorline						" highlights line
set cursorcolumn					" highlights column
set guitablabel=%t					" Tab headings
set guitabtooltip=%F					" Tab headings
set number relativenumber				" read "number_relativenumber" in help
set linespace=0						" space it out a little more (easier to read).
set cmdheight=1						" the command bar is 2 high.
set autoindent
set smartindent
set showmode						" show current-mode.
set showcmd						" show partially-typed commands.
set wildmenu						" visual autocomplete for command menu
set lazyredraw						" redraw only when we need to.
set showmatch						" show matching brackets
set sidescrolloff=2
highlight BoldGroup gui=bold
match BoldGroup /[\-\[\](){}.,;:=><_+*/]/
set backspace=indent,eol,start
set t_Co=256						" 256 colors
set listchars=tab:▸\ ,eol:¬,trail:•,extends:❯,precedes:❮	" Invisible characters (toggle with <,i>)
set showbreak=↪
set nolist						" Invisible characters turned off by default
set nofoldenable					" Folding disabled
set modelines=1
set autoread                                            "reload files when changed on disk

if (exists('+colorcolumn'))
    set colorcolumn=80
endi



" Spaces and Tabs

set tabstop=8 						" tab spacing (settings below are just to unify it)
set softtabstop=8
set shiftwidth=4
set expandtab
set nowrap
set smarttab 						" use tabs at the start of a line, spaces elsewhere
au FileType clojure,ruby,scala,haskell,eruby,javascript,html,css setl shiftwidth=2 softtabstop=2



" Search

set hlsearch						" highlight searched for phrases
set incsearch 						" highlight as you type you search phrase
set ignorecase      					" ignore case when searching.
set smartcase						" make case sensitive when upper-case included.
set gdefault						" substitutions to replace all matches in a line.



" Movement

" move vertically by visual line
nnoremap j gj
" move vertically by visual line
nnoremap k gk
nnoremap <space> <PageDown>
nnoremap <C-space> <PageUp>



" Misc

set shell=/bin/bash
set viminfo+=!						" make sure it can save viminfo.
set history=50						" fifty lines of command line history.
set nobackup
set noswapfile
set visualbell t_vb=					" turn off error beep/flash
set matchtime=5						" how many tenths of a second to blink matching brackets for
set matchpairs+=<:>					" have % bounce between angled brackets, as well as t'other kinds.
set laststatus=2					" always show the status line
set mouse=a						" use mouse everywhere.
set helpheight=999



" Mappings/Shortcuts

inoremap jk <Esc>
vnoremap < <gv
vnoremap > >gv
inoremap uu _
inoremap hh =><Space>
"inoremap aa @
inoremap ii \|<Space>
inoremap >x ✗<Space>
nnoremap <leader>md <Esc>V:s/✗/✓<CR>:noh<CR>
nnoremap <leader>mn <Esc>V:s/✓/✗<CR>:noh<CR>

nnoremap <D-1> 1gt
nnoremap <D-2> 2gt
nnoremap <D-3> 3gt
nnoremap <D-4> 4gt
nnoremap <D-0> :tablast<CR>
inoremap <D-1> <esc>1gt
inoremap <D-2> <esc>2gt
inoremap <D-3> <esc>3gt
inoremap <D-4> <esc>4gt
inoremap <D-0> <esc>:tablast<CR>

" Bubble lines, preserves indentation, courtesy of -romainl-
"nnoremap <silent> <Up>   :move-2<CR>==
"nnoremap <silent> <Down> :move+<CR>==
"xnoremap <silent> <Up>   :move-2<CR>gv=gv
"xnoremap <silent> <Down> :move'>+<CR>gv=gv


" Window management

" Jump to left window
nnoremap <C-h> <C-w>h
" Jump to right window
nnoremap <C-l> <C-w>l
" Jump to below window
"nnoremap <C-j> <C-w>j"<C-w>_
nnoremap <C-j> <C-w>j
" Jump to above window
"nnoremap <C-k> <C-w>k<C-w>_
nnoremap <C-k> <C-w>k

" Read this issue why the following is needed
" https://github.com/neovim/neovim/issues/2048
if has('nvim')
     nnoremap <BS> <C-W>h
 endif

set equalalways						" Multiple windows, when created, are equal in size
set splitbelow splitright				" Windows on splitting would be below or to the right



" Autogroups

function! <SID>StripTrailingWhiteSpaces()
    let cur_pos = getpos(".")
    %s/\s\+$//e
    call setpos(".", cur_pos)
endfun

augroup configgroup
    autocmd!
    autocmd FileType haskell            :inoremap <buffer> >> -><Space>
    autocmd FileType haskell,scala      :inoremap <buffer> << <-<Space>
    autocmd BufEnter * lcd %:p:h                                        " Sets path to directory buffer was loaded from
    autocmd BufWritePre * :call <SID>StripTrailingWhiteSpaces()         " remove trailing whitespace on save
    "autocmd FocusLost * :wa                                             " saves on focus lost
    au FileType gitcommit execute "normal! O" | startinsert             " when commiting add new line and enter insert mode
augroup END



" Language Specific

" Clojure
autocmd BufEnter *.cljs,*.clj,*.cljs.hl setlocal iskeyword+=?,-,*,!,+,/,=,<,>,.,:

" Scala
au BufNewFile,BufRead *.sc set filetype=scala

" Haskell
"nnoremap <silent> <leader>ht :GhcModType<CR>
"nnoremap <silent> <leader>hh :GhcModTypeClear<CR>
"nnoremap <silent> <leader>hT :GhcModTypeInsert<CR>
"nnoremap <silent> <leader>hc :SyntasticCheck ghc_mod<CR>:lopen<CR>
"let g:syntastic_mode_map={'mode': 'active', 'passive_filetypes': ['haskell']}
"let g:syntastic_always_populate_loc_list = 1
"nnoremap <silent> <leader>hl :SyntasticCheck hlint<CR>:lopen<CR>

" Auto-checking on writing
"autocmd BufWritePost *.hs,*.lhs GhcModCheckAndLintAsync

""  neocomplcache (advanced completion)
"autocmd BufEnter *.hs,*.lhs let g:neocomplcache_enable_at_startup = 1
"function! SetToCabalBuild()
    "if glob("*.cabal") != ''
        "set makeprg=cabal\ build
    "endif
"endfunction
"autocmd BufEnter *.hs,*.lhs :call SetToCabalBuild()

"" ghcmod-vim
""let g:ghcmod_ghc_options = ['-fno-warn-unused-binds', '-fno-warn-missing-signatures']

"" -- neco-ghc
"let $PATH=$PATH.':'.expand("~/.cabal/bin")





" Plugins configuration

" vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
"vnoremap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
"nnoremap ga <Plug>(EasyAlign)

" vim-notes
let g:notes_directories = ['~/Dropbox/Notes']
let g:notes_suffix = '.md'
let g:notes_title_sync = 'rename_file'

" vim-airline
let g:airline_powerline_fonts = 1

" ctrlp.vim
nnoremap <C-b> :CtrlPBuffer<CR>
"nnoremap <C-m> :CtrlPMRU<CR>
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
"let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden --ignore .git --ignore .svn --ignore .hg --ignore .DS_Store --ignore "**/*.pyc" -g ""'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
let g:ctrlp_by_filename = 1
let g:ctrlp_regexp = 1
let g:ctrlp_mruf_relative = 1
let g:ctrlp_use_caching = 0
let g:ctrlp_lazy_update = 1

" NerdTree
let NERDTreeHijackNetrw=1                                       " User instead of Netrw when doing an edit /foobar
let NERDTreeMouseMode=1                                         " Single click for everything
let g:NERDTreeWinPos = "left"

" vim-plug
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pu :PlugUpdate<CR>

" Leader shortcuts

" open vimrc
nnoremap <leader>ev :tabnew $MYVIMRC <CR>
nnoremap <leader>ov :e $MYVIMRC <CR>
" source vimrc
nnoremap <leader>sv :source $MYVIMRC <CR>
" vertical split
nnoremap <leader>v :vsp^M^W^W<CR>
" horizontal split
nnoremap <leader>h :split^M^W^W<CR>
" set paste/nopaste toggle
nnoremap <leader>pp :set paste!<CR>
nnoremap <leader>r :checktime<CR>
" Toggle invisible chars
nnoremap <leader>l :set list!<CR>
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
nnoremap <leader>u yyp<c-v>$r-I"<ESC>

" EasyAlign
"nnoremap <leader>f= vip:EasyAlign=<CR>
"vnoremap <leader>f= :EasyAlign=<CR>
"nnoremap <leader>f. vip:EasyAlign/->/<CR>
"vnoremap <leader>f. :EasyAlign/->/<CR>

" Paredit
let g:paredit_electric_return = 0
"let g:paredit_leader          = '\'
let g:paredit_smartjump       = 1  " When pressing '(' jump to the nearest '(', '[', '{'
"au Filetype clojure let g:paredit_shortmaps = 1

" Tabularize
" Align by a single colon, useful for Cabal descriptions.
nnoremap <leader>f; :Tabularize colon<CR>
" Align a set of bindings by "=".
nnoremap <leader>f= :Tabularize haskell_bindings<CR>
" Align line-comments at the end of lines.
nnoremap <leader>f- :Tabularize haskell_comments<CR>
" Align a set of monadic binds by "<-".
nnoremap <leader>f< :Tabularize haskell_do_arrows<CR>
" Align imports by import list and "as".
nnoremap <leader>fi :Tabularize haskell_imports<CR>
" Align a set of pattern matches by "->".
nnoremap <leader>f> :Tabularize haskell_pattern_arrows<CR>
" Align type signatures by "::" in a record.
nnoremap <leader>f: :Tabularize haskell_types<CR>
" Repeat the previous Tabularize
nnoremap <leader>fr :Tabularize<CR>
nnoremap <leader>f" :Tabularize / "/l0r0<CR>
nnoremap <leader>f, :Tabularize / ,/l1r0<CR>
vnoremap <leader>f= :EasyAlign-1=<CR>

" vim-notes
nnoremap <leader>on :tabnew<CR>:Note<Space>

" NerdTree
nnoremap <leader>n :NERDTreeTabsToggle<CR>

" webdevicons

let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '

let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = ' '

let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['sc'] = ''

" webdevicons -- NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('rb', 'red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('scala', 'red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('sc', 'red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('clj', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('cljs', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('hs', 'grey', 'none', 'grey', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')

" Slimux
nnoremap <leader>sl :SlimuxREPLSendLine<CR>
vnoremap <leader>ss :SlimuxREPLSendSelection<CR>
nnoremap <leader>sb :SlimuxREPLSendBuffer<CR>

" vim fugitive git
command! -nargs=+ Ggr execute 'silent Ggrep!' <q-args> | cw | redraw!
nnoremap <C-F> :Ggr <cword><CR>
nnoremap <leader>fp :Ggr <cword><CR>

" Ag
nnoremap <leader>fr :Ag <cword><CR>

" vim-wheel
let g:wheel#map#up   = '<D-k>'
let g:wheel#map#down = '<D-j>'

" vim-thematic
let g:thematic#themes = {
\ 'bubblegum'  : { 'typeface': 'Menlo',
\                  'font-size': 18,
\                  'transparency': 10,
\                  'linespace': 2,
\                },
\ 'pencil_dark' :{ 'colorscheme': 'pencil',
\                  'background': 'dark',
\                  'airline-theme': 'badwolf',
\                  'ruler': 1,
\                  'laststatus': 0,
\                  'typeface': 'Source Code Pro Light',
\                  'font-size': 20,
\                  'transparency': 10,
\                  'linespace': 8,
\                },
\ 'pencil_lite' :{ 'colorscheme': 'pencil',
\                  'background': 'light',
\                  'airline-theme': 'light',
\                  'laststatus': 0,
\                  'ruler': 1,
\                  'typeface': 'Source Code Pro',
\                  'fullscreen': 1,
\                  'transparency': 0,
\                  'font-size': 20,
\                  'linespace': 6,
\                },
\ }

" vim:foldmethod=marker:foldlevel=0:nofoldenable
