" Plugins {{{

call plug#begin()

" ➜ Look and feel
Plug 'flazz/vim-colorschemes'
Plug 'kien/rainbow_parentheses.vim'
Plug 'bling/vim-airline'
"Plug 'nathanaelkane/vim-indent-guides'
"Plug 'mhinz/vim-startify'
"Plug 'vim-scripts/ScrollColors'

" File navigation and search
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'rking/ag.vim'
Plug 'kien/ctrlp.vim'
Plug 'Lokaltog/vim-easymotion'
"Plug 'MattesGroeger/vim-bookmarks'
"Plug 'kien/tabman.vim'

" Notes and markdown
Plug 'plasticboy/vim-markdown'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-notes'
Plug 'vim-scripts/VOoM'

" Text management
"Plug 'junegunn/vim-easy-align'
Plug 'godlygeek/tabular'
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'
Plug 'takac/vim-hardtime'

" Git
Plug 'tpope/vim-fugitive'
"Plug 'gregsexton/gitv'

" Clojure plugins
Plug 'vim-scripts/paredit.vim'
"Plug 'guns/vim-clojure-static'
"Plug 'guns/vim-clojure-highlight'
"Plug 'tpope/vim-fireplace'

" Haskell
Plug 'raichoo/haskell-vim'
Plug 'dag/vim2hs'

" Could be tried
" 'tacahiroy/ctrlp-funky'
" 'guns/vim-sexp' for s-expressions, might be useful for clojure.
" 'tpope/vim-sexp-mappings-for-regular-people'
" 'kshenoy/vim-signature' another approach for handling bookmarks.
" 'vim-scripts/utl.vim' URL-based hyperlinking to plain text ...

call plug#end()

" }}}

" UI Config {{{

filetype on
filetype plugin indent on

set anti						" Antialias font
set guifont=Sauce\ Code\ Powerline:h14
set guioptions-=r                                       " Remove the right scrollbar
set title						" show title in console title bar.
set cursorline						" highlights line
set cursorcolumn					" highlights column
set guitablabel=%t					" Tab headings
set guitabtooltip=%F					" Tab headings
set number relativenumber				" read "number_relativenumber" in help
set linespace=0						" space it out a little more (easier to read).
set cmdheight=1						" the command bar is 2 high.
set autoindent
set smartindent
set showmode						" show current-mode.
set showcmd						" show partially-typed commands.
set wildmenu						" visual autocomplete for command menu
set lazyredraw						" redraw only when we need to.
set showmatch						" show matching brackets
set sidescrolloff=2
highlight BoldGroup gui=bold
match BoldGroup /[\-\[\](){}.,;:=><_+*/]/
set backspace=indent,eol,start
set t_Co=256						" 256 colors
set listchars=tab:▸\ ,eol:¬,trail:•,extends:❯,precedes:❮	" Invisible characters (toggle with <,i>)
set showbreak=↪
set nolist						" Invisible characters turned off by default
set nofoldenable					" Folding disabled
set modelines=1

" }}}

" Colors {{{
if has("gui_running")
    colorscheme gruvbox
    set background=dark
else
    colorscheme gruvbox
    set background=dark
endif
syntax on
syntax enable

" }}}

" Spaces and Tabs {{{

set tabstop=8 						" tab spacing (settings below are just to unify it)
set softtabstop=8
set shiftwidth=4
set expandtab
set nowrap
set smarttab 						" use tabs at the start of a line, spaces elsewhere
au FileType ruby,scala,haskell,eruby,javascript,html,css setl shiftwidth=2 softtabstop=2

" }}}

" Search {{{

set hlsearch						" highlight searched for phrases
set incsearch 						" highlight as you type you search phrase
set ignorecase      					" ignore case when searching.
set smartcase						" make case sensitive when upper-case included.
set gdefault						" substitutions to replace all matches in a line.

" }}}

" Movement {{{

" move vertically by visual line
nnoremap j gj
" move vertically by visual line
nnoremap k gk
nnoremap <space> <PageDown>
nnoremap <C-space> <PageUp>

" }}}

" Misc {{{

set shell=/bin/bash
set viminfo+=!						" make sure it can save viminfo.
set history=50						" fifty lines of command line history.
set nobackup
set noswapfile
set visualbell t_vb=					" turn off error beep/flash
set matchtime=5						" how many tenths of a second to blink matching brackets for
set matchpairs+=<:>					" have % bounce between angled brackets, as well as t'other kinds.
set laststatus=2					" always show the status line
set mouse=a						" use mouse everywhere.
set helpheight=999

" }}}

" Mappings/Shortcuts {{{

inoremap jk <Esc>:w<CR>
vnoremap < <gv
vnoremap > >gv
nnoremap <F2> :tabnew<CR>
nnoremap <F3> :tabp<CR>
nnoremap <F4> :tabn<CR>
inoremap uu _
inoremap hh =><Space>
"inoremap aa @
inoremap ii \|

" }}}

" Window management {{{

" Jump to left window
nnoremap <C-h> <C-w>h
" Jump to right window
nnoremap <C-l> <C-w>l
" Jump to below window
"nnoremap <C-j> <C-w>j"<C-w>_
nnoremap <C-j> <C-w>j
" Jump to above window
"nnoremap <C-k> <C-w>k<C-w>_
nnoremap <C-k> <C-w>k

set equalalways						" Multiple windows, when created, are equal in size
set splitbelow splitright				" Windows on splitting would be below or to the right

" }}}

" Autogroups {{{

function! <SID>StripTrailingWhiteSpaces()
    let cur_pos = getpos(".")
    %s/\s\+$//e
    call setpos(".", cur_pos)
endfun

augroup configgroup
    autocmd!
    autocmd FileType haskell            :inoremap <buffer> >> -><Space>
    autocmd FileType haskell,scala      :inoremap <buffer> << <-<Space>
    autocmd BufEnter * lcd %:p:h                                        " Sets path to directory buffer was loaded from
    autocmd BufWritePre * :call <SID>StripTrailingWhiteSpaces()         " remove trailing whitespace on save
    autocmd FocusLost * :wa                                             " saves on focus lost
    autocmd VimEnter * RainbowParenthesesToggle
    autocmd Syntax * RainbowParenthesesLoadRound
    autocmd Syntax * RainbowParenthesesLoadSquare
    autocmd Syntax * RainbowParenthesesLoadBraces
augroup END

" }}}

" Plugins configuration {{{

" vim-easy-align
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
"vnoremap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
"nnoremap ga <Plug>(EasyAlign)

" vim-notes
let g:notes_directories = ['~/Dropbox/Notes']
let g:notes_suffix = '.md'
let g:notes_title_sync = 'rename_file'

" vim-airline
let g:airline_powerline_fonts = 1

" ctrlp.vim
nnoremap <C-b> :CtrlPBuffer<CR>
"nnoremap <C-m> :CtrlPMRU<CR>
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" NerdTree
let NERDTreeHijackNetrw=1                                       " User instead of Netrw when doing an edit /foobar
let NERDTreeMouseMode=1                                         " Single click for everything
let g:NERDTreeWinPos = "left"

" Rainbow Parenthesis
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" vim-plug
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pu :PlugUpdate<CR>

" vim-bookmarks
"let g:bookmark_auto_close = 1

" }}}

" Leader shortcuts {{{

" open vimrc
nnoremap <leader>ev :tabnew $MYVIMRC <CR>
nnoremap <leader>ov :e $MYVIMRC <CR>
" source vimrc
nnoremap <leader>sv :source $MYVIMRC <CR>
" vertical split
nnoremap <leader>v :vsp^M^W^W<CR>
" horizontal split
nnoremap <leader>h :split^M^W^W<CR>
" set paste/nopaste toggle
nnoremap <leader>pp :set paste!<CR>
nnoremap <leader>r :checktime<CR>
" Toggle invisible chars
nnoremap <leader>i :set list!<CR>
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
nnoremap <leader>u yyp<c-v>$r-I"<ESC>
nnoremap ; :
nnoremap : ;

" EasyAlign
"nnoremap <leader>f= vip:EasyAlign=<CR>
"vnoremap <leader>f= :EasyAlign=<CR>
"nnoremap <leader>f. vip:EasyAlign/->/<CR>
"vnoremap <leader>f. :EasyAlign/->/<CR>

" Paredit
let g:paredit_electric_return = 0
"let g:paredit_leader          = '\'
let g:paredit_smartjump       = 1  " When pressing '(' jump to the nearest '(', '[', '{'
"au Filetype clojure let g:paredit_shortmaps = 1

" Tabularize
" Align by a single colon, useful for Cabal descriptions.
nnoremap <leader>f; :Tabularize colon<CR>
" Align a set of bindings by "=".
nnoremap <leader>f= :Tabularize haskell_bindings<CR>
" Align line-comments at the end of lines.
nnoremap <leader>f- :Tabularize haskell_comments<CR>
" Align a set of monadic binds by "<-".
nnoremap <leader>f, :Tabularize haskell_do_arrows<CR>
" Align imports by import list and "as".
nnoremap <leader>fi :Tabularize haskell_imports<CR>
" Align a set of pattern matches by "->".
nnoremap <leader>f. :Tabularize haskell_pattern_arrows<CR>
" Align type signatures by "::" in a record.
nnoremap <leader>f: :Tabularize haskell_types<CR>
" Repeat the previous Tabularize
nnoremap <leader>fr :Tabularize<CR>

" vim-notes
nnoremap <leader>on :tabnew <CR>:Note vim<CR>

" NerdTree
nnoremap <leader>n :NERDTreeTabsToggle<CR>

" vim-hardtime
let g:hardtime_default_on = 1
"let g:hardtime_showmsg = 1

" }}}

" vim:foldmethod=marker:foldlevel=0:nofoldenable
