" Plugins

call plug#begin()

" Misc
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'xolox/vim-misc'

" File navigation and search
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'rking/ag.vim'
Plug 'ctrlpvim/ctrlp.vim'

" Look and feel
Plug 'chriskempson/base16-vim'
Plug 'frankier/neovim-colors-solarized-truecolor-only'
Plug 'morhetz/gruvbox'
Plug 'rakr/vim-two-firewatch'
Plug 'rakr/vim-one'

" Tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux'
Plug 'tmux-plugins/vim-tmux-focus-events'

" Language agnostic
Plug 'neomake/neomake'
Plug 'Shougo/deoplete.nvim'


" LSP support
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Haskell
Plug 'neovimhaskell/haskell-vim'
Plug 'meck/vim-brittany'

" Note taking
Plug 'vimwiki/vimwiki'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'michal-h21/vim-zettel'
Plug 'alok/notational-fzf-vim'

call plug#end()



syntax on
syntax enable
let $NVIM_TUI_ENABLE_TRUE_COLOR=1
let g:solarized_termcolors=256

" Colors
set termguicolors
colorscheme gruvbox
set background=dark



" UI Config

filetype on
filetype plugin indent on

highlight Comment gui=bold,italic
highlight cursorline gui=bold cterm=bold

set guifont=Monaco:h18
set guioptions-=r                                       " Remove the right scrollbar
set title						" show title in console title bar.
set cursorline						" highlights line
set cursorcolumn					" highlights column
set guitablabel=%t					" Tab headings
set guitabtooltip=%F					" Tab headings
set number                                              " read "number_relativenumber" in help
set linespace=0						" space it out a little more (easier to read).
set cmdheight=1						" the command bar is 2 high.
set autoindent
set smartindent
set showmode						" show current-mode.
set showcmd						" show partially-typed commands.
set wildmenu						" visual autocomplete for command menu
set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git,.cabal-sandbox,*.class,target
set wildmode=longest,list,full
set completeopt=menuone,menu,longest                    " autocomplete related options.
set lazyredraw						" redraw only when we need to.
set showmatch						" show matching brackets
set sidescrolloff=2
highlight BoldGroup gui=bold
match BoldGroup /[\-\[\](){}.,;:=><_+*/]/
set backspace=indent,eol,start
set t_Co=256						" 256 colors
set listchars=tab:▸\ ,eol:¬,trail:•,extends:❯,precedes:❮	" Invisible characters (toggle with <,i>)
set showbreak=↪
set nolist						" Invisible characters turned off by default
set nofoldenable					" Folding disabled
set modelines=1
set autoread                                            "reload files when changed on disk

if (exists('+colorcolumn'))
    set colorcolumn=80
endi



" Spaces and Tabs

set tabstop=8 						" tab spacing (settings below are just to unify it)
set softtabstop=8
set shiftwidth=4
set expandtab
set nowrap
set smarttab 						" use tabs at the start of a line, spaces elsewhere
au FileType clojure,ruby,scala,haskell,eruby,javascript,html,css setl shiftwidth=2 softtabstop=2
nnoremap J gJ                                           " Join lines without spaces

" Search

set hlsearch						" highlight searched for phrases
set incsearch 						" highlight as you type you search phrase
set ignorecase      					" ignore case when searching.
set smartcase						" make case sensitive when upper-case included.
set gdefault						" substitutions to replace all matches in a line.



" Movement

" move vertically by visual line
nnoremap j gj
" move vertically by visual line
nnoremap k gk
nnoremap <space> <PageDown>
nnoremap <C-space> <PageUp>



" Misc

set shell=/bin/bash
set viminfo+=!						" make sure it can save viminfo.
set history=50						" fifty lines of command line history.
set nobackup
set noswapfile
set visualbell t_vb=					" turn off error beep/flash
set matchtime=5						" how many tenths of a second to blink matching brackets for
set matchpairs+=<:>					" have % bounce between angled brackets, as well as t'other kinds.
set laststatus=2					" always show the status line
set mouse=a						" use mouse everywhere.
set helpheight=999
" Open help in new tab
cabbrev help tab help
cabbrev h tab h



" Mappings/Shortcuts

inoremap jk <Esc>
vnoremap < <gv
vnoremap > >gv
"inoremap uu _
inoremap hh =><Space>
"inoremap aa @
inoremap ii \|<Space>
inoremap >x ✗<Space>
nnoremap <leader>md <Esc>V:s/✗/✓<CR>:noh<CR>
nnoremap <leader>mn <Esc>V:s/✓/✗<CR>:noh<CR>


" Window management

" Jump to left window
nnoremap <C-h> <C-w>h
" Jump to right window
nnoremap <C-l> <C-w>l
" Jump to below window
nnoremap <C-j> <C-w>j
" Jump to above window
nnoremap <C-k> <C-w>k

" Read this issue why the following is needed
" https://github.com/neovim/neovim/issues/2048
if has('nvim')
     nnoremap <BS> <C-W>h
 endif

set equalalways						" Multiple windows, when created, are equal in size
set splitbelow splitright				" Windows on splitting would be below or to the right



" Autogroups

function! <SID>StripTrailingWhiteSpaces()
    let cur_pos = getpos(".")
    %s/\s\+$//e
    call setpos(".", cur_pos)
endfun



" Language Specific

augroup configgroup
    autocmd!
    autocmd FileType haskell            :inoremap <buffer> >> -><Space>
    autocmd FileType haskell,scala      :inoremap <buffer> << <-<Space>
    autocmd BufEnter * lcd %:p:h                                        " Sets path to directory buffer was loaded from
    autocmd BufWritePre * :call <SID>StripTrailingWhiteSpaces()         " remove trailing whitespace on save
    "autocmd FocusLost * :wa                                             " saves on focus lost
    au FileType gitcommit execute "normal! A " | startinsert             " when commiting enter insert mode at the end of line
augroup END

" Scala
au BufNewFile,BufRead *.sc set filetype=scala
au BufRead,BufNewFile *.sbt set filetype=scala

autocmd FileType json syntax match Comment +\/\/.\+$+

" Plugins configuration



" ctrlp.vim
nnoremap <C-b> :CtrlPBuffer<CR>
nnoremap <C-m> :CtrlPMRU<CR>
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
"let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden --ignore .git --ignore .svn --ignore .hg --ignore .DS_Store --ignore "**/*.pyc" -g ""'
let g:ctrlp_by_filename = 1
"let g:ctrlp_regexp = 1
let g:ctrlp_mruf_relative = 1
let g:ctrlp_use_caching = 0
"let g:ctrlp_lazy_update = 1
let g:ctrlp_root_markers = ['.ctrlp_root', 'stack.yaml']

" NerdTree
let NERDTreeHijackNetrw=1                                       " User instead of Netrw when doing an edit /foobar
let NERDTreeMouseMode=1                                         " Single click for everything
let g:NERDTreeWinPos = "left"

" vim-plug
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pc :PlugClean<CR>
nnoremap <leader>pu :PlugUpdate<CR>

" Leader shortcuts

" open vimrc
nnoremap <leader>ev :tabnew $MYVIMRC <CR>
nnoremap <leader>ov :e $MYVIMRC <CR>

" source vimrc
nnoremap <leader>sv :source $MYVIMRC <CR>
" vertical split
nnoremap <leader>v :vsp^M^W^W<CR>
" horizontal split
nnoremap <leader>h :split^M^W^W<CR>
" set paste/nopaste toggle
nnoremap <leader>pp :set paste!<CR>
nnoremap <leader>r :checktime<CR>
" Toggle invisible chars
nnoremap <leader>l :set list!<CR>
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
" underline with dashes
nnoremap <leader>u yyp<c-v>$r-I"<ESC>

" vp doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()



" NerdTree
nnoremap <leader>t :NERDTreeTabsToggle<CR>

" Coc
let g:coc_node_path = '/usr/local/bin/node'

" Note taking
let g:zettel_format = '%Y-%m-%d-%H:%M'
" Settings for Vimwiki
let g:vimwiki_list = [
            \           {'path':'~/Dropbox/Notes/Zettels/'}
            \           ,
            \           {'path':'~/Dropbox/Notes/Organized/'}
            \   ]
" Set template and custom header variable for Zettel
let g:zettel_options = [
            \           {'front_matter' : {'tags' : ''}, 'template' :  '~/Dropbox/Notes/vimwiki-template.tpl'}
            \   ]
" Notational FZF search path
let g:nv_search_paths = [
            \           '~/Dropbox/Notes/Zettels/'
            \           ,
            \           '~/Dropbox/Notes/Organized/'
            \   ]

" Ag
nnoremap <leader>fr :Ag <cword><CR>

com! FormatJSON %!python -m json.tool

" vim:foldmethod=marker:foldlevel=0:nofoldenable
